#!/usr/bin/env ruby
# -*- coding: utf-8 -*-

require 'optparse'
require 'plain_text'

BANNER = <<"__EOF__"
USAGE: #{File.basename($0)} [options] [INFILE.txt] < STDIN
  Print the number of characters in INFILE (or STDIN).
__EOF__

# Initialising the hash for the command-line options.
OPTS = {
  line_i: nil,
  line_f: nil,
  # :chatter => 3,        # Default
  debug: false,
}

# Load the default values from the Module
PlainText::DEF_METHOD_OPTS[:count_char].each_key do |ek|
  OPTS[ek] ||= PlainText::DEF_METHOD_OPTS[:count_char][ek]
end

# Function to handle the command-line arguments.
#
# ARGV will be modified, and the constant variable OPTS is set.
#
# @return [Hash]  Optional-argument hash.
#
def handle_argv
  opt = OptionParser.new(BANNER)
  opt.on(  '--[no-]preserve_paragraph', sprintf("Preserved paragraph structures? (Def: %s)", OPTS[:preserve_paragraph].inspect), TrueClass) {|v| OPTS[:preserve_paragraph] = v}
  opt.on(  '--lbs-style=STYLE', sprintf("One of (t(runcate)|d(elete)|n(one)) (Def: truncate).", Symbol)) { |v| OPTS[:lbs_style]=v.strip[0].to_sym }
  # opt.on(  '--version', "Display the version and exits.", TrueClass) {|v| OPTS[:version] = v}  # Consider opts.on_tail
  opt.on(  '--[no-]debug', "Debug (Def: false)", TrueClass) {|v| OPTS[:debug] = v}
  opt.separator ""        # Way to control a help message.
  opt.separator "Note:"
  opt.separator " Spaces are truncated in default."

  opt.parse!(ARGV)

  OPTS[:lbs_style] = OPTS[:lbs_style].to_s[0].to_sym
  unless %i(t d n).include? OPTS[:lbs_style]
    warn "ERROR: --lbs-style must be one of (t(runcate)|d(elete)|n(one)), but given (#{OPTS[:lbs_style].inspect})"; exit 1
  end

  OPTS
end


################################################
# MAIN
################################################

$stdout.sync=true
$stderr.sync=true

class String
  include PlainText
end

# Handle the command-line options => OPTS
opts = handle_argv()

valid_keys = PlainText::DEF_METHOD_OPTS[:count_char].keys
opts.each_key do |ek|
  opts.delete ek if !valid_keys.include? ek
end

str = ARGF.read

puts PlainText.count_char(str, **opts)
# str.count_char() should be equivalent.

exit

__END__


